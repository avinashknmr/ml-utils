[{"fullname": "ml_utils", "modulename": "ml_utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ml_utils.draw", "modulename": "ml_utils.draw", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ml_utils.draw.gain_plot", "modulename": "ml_utils.draw", "qualname": "gain_plot", "type": "function", "doc": "<p>Returns a lift chart or gains plot against True Positive Rate vs False Positive Rate</p>\n", "parameters": ["y_actual", "y_pred"], "funcdef": "def"}, {"fullname": "ml_utils.draw.iv_plot", "modulename": "ml_utils.draw", "qualname": "iv_plot", "type": "function", "doc": "<p>Returns an IV plot for a specified variable</p>\n", "parameters": ["df", "var_name", "suffix"], "funcdef": "def"}, {"fullname": "ml_utils.draw.csi_plot", "modulename": "ml_utils.draw", "qualname": "csi_plot", "type": "function", "doc": "<p>Returns a CSI plot for a specified variable</p>\n", "parameters": ["df", "var_name"], "funcdef": "def"}, {"fullname": "ml_utils.measure", "modulename": "ml_utils.measure", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ml_utils.measure.Metrics", "modulename": "ml_utils.measure", "qualname": "Metrics", "type": "class", "doc": "<p></p>\n"}, {"fullname": "ml_utils.measure.Metrics.__init__", "modulename": "ml_utils.measure", "qualname": "Metrics.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "df", "actual", "prediction"], "funcdef": "def"}, {"fullname": "ml_utils.measure.Metrics.ks", "modulename": "ml_utils.measure", "qualname": "Metrics.ks", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ml_utils.measure.Metrics.gini", "modulename": "ml_utils.measure", "qualname": "Metrics.gini", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ml_utils.measure.Metrics.calculate_gains", "modulename": "ml_utils.measure", "qualname": "Metrics.calculate_gains", "type": "function", "doc": "<p>Returns a pandas dataframe with gains along with KS and Gini calculated</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ml_utils.measure.Metrics.get_threshold", "modulename": "ml_utils.measure", "qualname": "Metrics.get_threshold", "type": "function", "doc": "<p>Returns a pandas dataframe with y_pred based on threshold from roc_curve.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ml_utils.measure.Metrics.precision_recall_f1_score", "modulename": "ml_utils.measure", "qualname": "Metrics.precision_recall_f1_score", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ml_utils.measure.Metrics.to_dict", "modulename": "ml_utils.measure", "qualname": "Metrics.to_dict", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ml_utils.measure.standard_metrics", "modulename": "ml_utils.measure", "qualname": "standard_metrics", "type": "function", "doc": "<p>Returns a dict with all metrics - Gini, KS, Precision, Recall, F1 Score, True Negative, True Positive, False Positive, False Negative.</p>\n", "parameters": ["df", "target_col", "prediction_col"], "funcdef": "def"}, {"fullname": "ml_utils.measure.quick_psi", "modulename": "ml_utils.measure", "qualname": "quick_psi", "type": "function", "doc": "<p>Calculate PSI from 2 arrays - dev and val</p>\n", "parameters": ["dev", "val"], "funcdef": "def"}, {"fullname": "ml_utils.measure.psi", "modulename": "ml_utils.measure", "qualname": "psi", "type": "function", "doc": "<p>Returns a pandas dataframe with psi column (Population Stability Index) after creating 10 deciles.\nCode includes creating score calculation using round(500-30 x log(100 x (p/(1-p))), 0) where p is probability.\nWe need to pass both dev and val at same time to apply same bins created on dev dataframe.</p>\n", "parameters": ["dev", "val", "target", "n_bins"], "funcdef": "def"}, {"fullname": "ml_utils.measure.gsi", "modulename": "ml_utils.measure", "qualname": "gsi", "type": "function", "doc": "<p>Returns a pandas dataframe with gsi columns (Group Stability Index) after creating n bins.\nArgs:\n    data: pandas dataframe\n    col: Columns on which GSI has to be calculated (ex: Gender column)\n    col_val: selected value will be compared with rest of the values (ex: F vs Rest)\n    target: score column\n    n_bins: number of bins to be created (Default=10)</p>\n", "parameters": ["data", "col", "col_val", "target", "n_bins"], "funcdef": "def"}, {"fullname": "ml_utils.measure.chi_square", "modulename": "ml_utils.measure", "qualname": "chi_square", "type": "function", "doc": "<p>Returns a pandas dataframe with calculated fields - resp_rate, perc_dist, perc_non_resp, perc_resp, raw_odds, ln_odds, iv_bins, exp_resp, exp_non_resp, chi_square.</p>\n", "parameters": ["df", "suffix"], "funcdef": "def"}, {"fullname": "ml_utils.measure.woe_bins", "modulename": "ml_utils.measure", "qualname": "woe_bins", "type": "function", "doc": "<p>Returns a pandas dataframe, var_cuts after creating bins.\nReturns:\n    df: pandas dataframe has var_cuts_string, total, responders, non_responders, var_name (with _dev or _val suffix)\n    var_cuts: list of Interval items to be used on val file.</p>\n", "parameters": ["df", "var_name", "resp_name", "suffix", "var_cuts"], "funcdef": "def"}, {"fullname": "ml_utils.measure.csi", "modulename": "ml_utils.measure", "qualname": "csi", "type": "function", "doc": "<p>Returns a pandas dataframe with csi, csi_var, perc_csi columns (Charecteristic Stability Index) calculated based on both dev and val dataframes.</p>\n", "parameters": ["dev_df", "val_df", "var_list", "resp_name"], "funcdef": "def"}, {"fullname": "ml_utils.measure.get_decilewise_counts", "modulename": "ml_utils.measure", "qualname": "get_decilewise_counts", "type": "function", "doc": "<p>Returns a summarized pandas dataframe with total and responders for each decile based on positive_probability.</p>\n", "parameters": ["df", "target", "bins", "cutpoints"], "funcdef": "def"}]